{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "ArkConfig",
  "type": "object",
  "properties": {
    "auth": {
      "description": "Authentication configuration (optional)",
      "anyOf": [
        {
          "$ref": "#/$defs/AuthConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "cert_email": {
      "description": "Expected certificate email for verification.",
      "type": [
        "string",
        "null"
      ],
      "default": null
    },
    "cert_issuer": {
      "description": "Expected certificate issuer for verification.",
      "type": [
        "string",
        "null"
      ],
      "default": null
    },
    "cert_url": {
      "description": "Expected certificate URL for verification.",
      "type": [
        "string",
        "null"
      ],
      "default": null
    },
    "insecure_skip_signature": {
      "description": "Skip OCI signature verification (NOT recommended for production).",
      "type": "boolean",
      "default": false
    },
    "management_server": {
      "description": "Management server configuration.",
      "anyOf": [
        {
          "$ref": "#/$defs/ManagementEndpointConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "mcp_server": {
      "description": "MCP server configuration.",
      "anyOf": [
        {
          "$ref": "#/$defs/McpEndpointConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "plugins": {
      "description": "List of plugins to load at startup.",
      "type": "array",
      "default": [],
      "items": {
        "$ref": "#/$defs/ArkPlugin"
      }
    },
    "tls": {
      "description": "TLS configuration.",
      "anyOf": [
        {
          "$ref": "#/$defs/TlsConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "token_signing": {
      "description": "Optional token signing configuration (controls local signing/JWKS)",
      "anyOf": [
        {
          "$ref": "#/$defs/TokenSigningConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "transport": {
      "description": "MCP transport selection (stdio, sse, streamable-http).",
      "anyOf": [
        {
          "$ref": "#/$defs/McpTransport"
        },
        {
          "type": "null"
        }
      ],
      "default": "stdio"
    },
    "use_sigstore_tuf_data": {
      "description": "Use Sigstore TUF data for verification (recommended default: true).",
      "type": "boolean",
      "default": true
    }
  },
  "$defs": {
    "ArkPlugin": {
      "description": "Plugin entry as configured by the user.\n\nThis struct represents a plugin configuration that can be loaded from various sources\nincluding local files, remote URLs, and OCI registries. It supports flexible authentication\nand security settings for different deployment scenarios.",
      "type": "object",
      "properties": {
        "config": {
          "description": "Optional authentication used by handlers that need it (e.g., OCI registries).",
          "anyOf": [
            {
              "$ref": "#/$defs/OciAuthentication"
            },
            {
              "type": "null"
            }
          ]
        },
        "insecure": {
          "description": "Allow insecure transports (e.g., HTTP) for handlers that support it.\nDefaults to false for security.",
          "type": "boolean",
          "default": false
        },
        "manifest": {
          "description": "Optional plugin manifest containing runtime configuration.",
          "anyOf": [
            {
              "$ref": "#/$defs/PluginManifest"
            },
            {
              "type": "null"
            }
          ]
        },
        "name": {
          "description": "Friendly name for the plugin used for identification and logging.",
          "type": "string"
        },
        "owner": {
          "description": "Optional owner identity for the plugin in the canonical global id format\n(provider:tenant:userid). This can be used to record which authenticated\nPrincipal registered or owns the plugin.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "url": {
          "description": "Location of the plugin (e.g., file:///..., http(s)://..., oci://...).\nCan be a file path or URL, automatically converted during deserialization.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "url"
      ]
    },
    "AuthConfig": {
      "description": "Top-level authentication configuration.",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "provider": {
          "description": "Active provider name.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "providers": {
          "description": "Declared provider configurations.",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/$defs/IdentityProviderConfig"
          }
        },
        "session": {
          "description": "Optional session configuration (enables cookie-based auth for browser clients).",
          "anyOf": [
            {
              "$ref": "#/$defs/SessionConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      }
    },
    "IdentityProviderConfig": {
      "description": "Configuration for a single external identity provider (Microsoft / Google).",
      "type": "object",
      "properties": {
        "additional_scopes": {
          "description": "Optional additional scopes to request during authentication flows.",
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "items": {
            "type": "string"
          }
        },
        "admin_group": {
          "description": "Optional canonical admin group identifier for this provider.\n- Entra (Azure AD): use the group's object id (GUID).\n- Google Workspace: use the group's canonical email or group id.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "audience": {
          "description": "Optional audience override (defaults to client_id if not set).",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "authority": {
          "description": "Issuer / authority base URL.",
          "type": "string"
        },
        "authorization_endpoint": {
          "description": "Optional explicit authorization endpoint (overrides discovery if set).",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "client_id": {
          "description": "OAuth / OIDC client id.",
          "type": "string"
        },
        "client_secret": {
          "description": "Optional client secret (only for confidential flows; not required for pure bearer validation).",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "discovery": {
          "description": "Whether to attempt OIDC discovery for endpoints and JWKS (default true).",
          "type": "boolean",
          "default": true
        },
        "jwks_uri": {
          "description": "Optional explicit JWKS URI (overrides discovery & builtin heuristics).",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "name": {
          "description": "Logical name referenced by `auth.provider` (e.g. \"microsoft\", \"google\").",
          "type": "string"
        },
        "redirect_uri": {
          "description": "Optional redirect_uri to include in authorization and token requests.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "scopes": {
          "description": "Optional space-separated scopes (defaults to \"openid profile email\").",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "token_endpoint": {
          "description": "Optional explicit token endpoint (overrides discovery if set).",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "user_group": {
          "description": "Optional canonical user group identifier for this provider (non-admin users).",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      },
      "required": [
        "name",
        "client_id",
        "authority"
      ]
    },
    "ManagementEndpointConfig": {
      "description": "Management server configuration, including optional separate bind address and response type.",
      "type": "object",
      "properties": {
        "bind_address": {
          "description": "Optional bind address for the management server.",
          "type": [
            "string",
            "null"
          ],
          "default": "127.0.0.1:8000"
        },
        "cors": {
          "description": "CORS allowed origins.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "disable_console": {
          "description": "Whether to disable the admin console.",
          "type": "boolean",
          "default": false
        },
        "disable_emit_otel": {
          "description": "Whether to disable emitting otel metrics.",
          "type": "boolean",
          "default": true
        },
        "disable_health_api": {
          "description": "Whether to disable the health API.",
          "type": "boolean",
          "default": false
        },
        "disable_plugin_api": {
          "description": "Whether to disable the plugin management API.",
          "type": "boolean",
          "default": false
        },
        "disable_prometheus_api": {
          "description": "Whether to disable the prometheus api",
          "type": "boolean",
          "default": false
        },
        "livez": {
          "description": "Liveness probe setup.",
          "$ref": "#/$defs/ManagementPathConfig",
          "default": {
            "enabled": false,
            "path": "/livez"
          }
        },
        "readyz": {
          "description": "Readiness probe setup.",
          "$ref": "#/$defs/ManagementPathConfig",
          "default": {
            "enabled": false,
            "path": "/readyz"
          }
        },
        "response_type": {
          "description": "Response body type for management endpoints: \"text\" (default) or \"json\".",
          "type": "string",
          "default": "json"
        }
      }
    },
    "ManagementPathConfig": {
      "description": "Configuration for a management endpoint (liveness/readiness).",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Whether the endpoint is enabled.",
          "type": "boolean"
        },
        "path": {
          "description": "URL path to expose (e.g., \"/livez\"). If `None`, the endpoint is disabled.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "enabled"
      ]
    },
    "McpEndpointConfig": {
      "description": "MCP server configuration, including optional separate bind address.",
      "type": "object",
      "properties": {
        "bind_address": {
          "description": "Optional bind address for the MCP server.",
          "type": [
            "string",
            "null"
          ],
          "default": "127.0.0.1:3001"
        },
        "cors": {
          "description": "CORS allowed origins.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "McpTransport": {
      "description": "Supported transports for MCP communications.",
      "oneOf": [
        {
          "description": "Standard I/O transport.",
          "type": "string",
          "const": "stdio"
        },
        {
          "description": "Server-Sent Events over HTTP (not implemented).",
          "type": "string",
          "const": "sse"
        },
        {
          "description": "Streamable HTTP transport.",
          "type": "string",
          "const": "streamablehttp"
        }
      ]
    },
    "MemoryLimits": {
      "description": "Memory allocation limits for the plugin.\n\nDefines constraints on the WebAssembly plugin's memory usage to prevent\nresource exhaustion and ensure sandboxing security.",
      "type": "object",
      "properties": {
        "max_pages": {
          "description": "Maximum memory pages (1 page = 64KiB).\nLimits total memory allocation for the plugin instance.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0
        }
      }
    },
    "OciAuthentication": {
      "description": "Authentication options for pulling artifacts from OCI registries.",
      "oneOf": [
        {
          "description": "Basic auth with username and password.",
          "type": "object",
          "properties": {
            "password": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "const": "basic"
            },
            "username": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "username",
            "password"
          ]
        },
        {
          "description": "Bearer token auth.",
          "type": "object",
          "properties": {
            "token": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "const": "bearer"
            }
          },
          "required": [
            "type",
            "token"
          ]
        },
        {
          "description": "Anonymous auth (no credentials).",
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "anonymous"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "PluginManifest": {
      "description": "Example plugin manifest structure:\n```json\n{\n  \"wasm\": [\n    \"./target/wasm32-wasi/release/my_plugin.wasm\",\n    \"https://example.com/deps/util.wasm\",\n    \"BASE64_WASM_BYTES==\"\n  ],\n  \"memory\": { \"max_pages\": 1024 },\n  \"config\": {\n    \"SERVICE_BASE_URL\": \"https://api.example.com\",\n    \"FEATURE_FLAG_X\": \"true\",\n    \"TENANT_ID\": \"contoso\"\n  },\n  \"allowed_hosts\": [ \"api.example.com\", \"telemetry.example.net\" ],\n  \"allowed_paths\": {\n    \"/var/log/extism\": \"/write/path\",\n    \"/etc/my_plugin\": \"/read/path\",\n    \"/tmp\": \"/readwrite/path\"\n  }\n}\n```\nTop-level manifest structure for Extism plugins.\n\nThis structure defines the configuration for loading and running WebAssembly plugins\nusing the Extism runtime. All fields are optional to allow flexible plugin assembly\nand deployment scenarios.",
      "type": "object",
      "properties": {
        "allowed_hosts": {
          "description": "Allowed HTTP domains for network access restrictions.\nLimits the plugin's ability to make outbound HTTP requests for security.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "allowed_paths": {
          "description": "Filesystem access mapping for WASI-enabled plugins.\nMaps host paths to plugin-accessible paths with read/write permissions.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "config": {
          "description": "Arbitrary plugin configuration passed at runtime.\nKey-value pairs that the plugin can access during execution.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "memory": {
          "description": "Memory and buffer limits for sandboxing controls.\nRestricts the plugin's memory usage for security and resource management.",
          "anyOf": [
            {
              "$ref": "#/$defs/MemoryLimits"
            },
            {
              "type": "null"
            }
          ]
        },
        "wasm": {
          "description": "WASM module(s) to load — can be file paths, URLs, or base64-encoded data.\nMultiple modules allow for plugin composition and dependency management.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SessionConfig": {
      "description": "Session cookie configuration.",
      "type": "object",
      "properties": {
        "cookie_domain": {
          "description": "Optional cookie domain (e.g., \"localhost\" or \".example.com\")",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "cookie_http_only": {
          "type": "boolean",
          "default": true
        },
        "cookie_name": {
          "type": "string",
          "default": "ark_session"
        },
        "cookie_secure": {
          "type": "boolean",
          "default": true
        },
        "same_site": {
          "type": "string",
          "default": "Lax"
        },
        "timeout_seconds": {
          "type": "integer",
          "format": "uint64",
          "default": 3600,
          "minimum": 0
        }
      }
    },
    "TlsConfig": {
      "description": "TLS configuration for secure connections.",
      "type": "object",
      "properties": {
        "cert": {
          "description": "TLS certificate (relative to configuration directory).",
          "type": [
            "string",
            "null"
          ]
        },
        "key": {
          "description": "TLS private key (relative to configuration directory).",
          "type": [
            "string",
            "null"
          ]
        },
        "silent_insecure": {
          "description": "Whether to suppress insecure connection warnings.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "TokenSigningConfig": {
      "description": "Token signing configuration for ID token issuance.",
      "type": "object",
      "properties": {
        "cert": {
          "description": "Optional path to public cert (PEM) for JWKS construction.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "key": {
          "description": "Path to local PEM private key (used when source == \"local\").",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "source": {
          "description": "Source of the signing key: \"local\" | \"azure\" | \"aws\"",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    }
  }
}